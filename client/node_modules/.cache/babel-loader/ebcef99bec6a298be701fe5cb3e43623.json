{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  currentSample: null,\n  idx: 4 // value: 6,\n\n};\nexport const sampleStateSlice = createSlice({\n  name: 'sampleState',\n  initialState,\n  reducers: {\n    increment: state => {\n      state.idx += 1;\n    },\n    setSample: (state, action) => {\n      state.currentSample = action.payload;\n    },\n    setIdx: (state, action) => {\n      state.idx = action.payload;\n      console.log('setIdx', state.idx);\n    } // setValue: (state, action: PayloadAction<number>) => {\n    //     state.value = action.payload;\n    // }\n\n  }\n});\nexport const {\n  setSample,\n  setIdx,\n  setValue\n} = sampleStateSlice.actions;\nexport const selectSample = state => state.currentSample.value;\nexport default sampleStateSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","currentSample","idx","sampleStateSlice","name","reducers","increment","state","setSample","action","payload","setIdx","console","log","setValue","actions","selectSample","value","reducer"],"sources":["/Users/jackdavey/GitProjects/Relyion/Dashboard/client/src/sampleStateSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport type { RootState } from './store';\nimport type DataSample from './types/datasample.type';\n\n\nexport interface SampleState {\n    currentSample: DataSample | null;\n    idx: number;\n    // value: number;\n}\n\nconst initialState: SampleState = {\n    currentSample: null,\n    idx: 4,\n    // value: 6,\n};\n\nexport const sampleStateSlice = createSlice({\n    name: 'sampleState',\n    initialState,\n    reducers: {\n        increment: (state) => {\n            state.idx += 1;\n        },\n        setSample: (state, action: PayloadAction<DataSample>) => {\n            state.currentSample = action.payload;\n        },\n        setIdx: (state, action: PayloadAction<number>) => {\n            state.idx = action.payload;\n            console.log('setIdx', state.idx);\n        },\n        // setValue: (state, action: PayloadAction<number>) => {\n        //     state.value = action.payload;\n        // }\n    },\n});\n\nexport const { setSample, setIdx, setValue } = sampleStateSlice.actions;\n\nexport const selectSample = (state: RootState) => state.currentSample.value;\n\nexport default sampleStateSlice.reducer;\n\n\n\n"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AAWA,MAAMC,YAAyB,GAAG;EAC9BC,aAAa,EAAE,IADe;EAE9BC,GAAG,EAAE,CAFyB,CAG9B;;AAH8B,CAAlC;AAMA,OAAO,MAAMC,gBAAgB,GAAGJ,WAAW,CAAC;EACxCK,IAAI,EAAE,aADkC;EAExCJ,YAFwC;EAGxCK,QAAQ,EAAE;IACNC,SAAS,EAAGC,KAAD,IAAW;MAClBA,KAAK,CAACL,GAAN,IAAa,CAAb;IACH,CAHK;IAINM,SAAS,EAAE,CAACD,KAAD,EAAQE,MAAR,KAA8C;MACrDF,KAAK,CAACN,aAAN,GAAsBQ,MAAM,CAACC,OAA7B;IACH,CANK;IAONC,MAAM,EAAE,CAACJ,KAAD,EAAQE,MAAR,KAA0C;MAC9CF,KAAK,CAACL,GAAN,GAAYO,MAAM,CAACC,OAAnB;MACAE,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBN,KAAK,CAACL,GAA5B;IACH,CAVK,CAWN;IACA;IACA;;EAbM;AAH8B,CAAD,CAApC;AAoBP,OAAO,MAAM;EAAEM,SAAF;EAAaG,MAAb;EAAqBG;AAArB,IAAkCX,gBAAgB,CAACY,OAAzD;AAEP,OAAO,MAAMC,YAAY,GAAIT,KAAD,IAAsBA,KAAK,CAACN,aAAN,CAAoBgB,KAA/D;AAEP,eAAed,gBAAgB,CAACe,OAAhC"},"metadata":{},"sourceType":"module"}