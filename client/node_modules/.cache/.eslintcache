[{"/Users/jackdavey/GitProjects/Relyion/Dashboard/client/src/index.tsx":"1","/Users/jackdavey/GitProjects/Relyion/Dashboard/client/src/reportWebVitals.ts":"2","/Users/jackdavey/GitProjects/Relyion/Dashboard/client/src/App.tsx":"3","/Users/jackdavey/GitProjects/Relyion/Dashboard/client/src/components/listDataSamples.js":"4","/Users/jackdavey/GitProjects/Relyion/Dashboard/client/src/services/datasample.service.ts":"5","/Users/jackdavey/GitProjects/Relyion/Dashboard/client/src/http-common.ts":"6","/Users/jackdavey/GitProjects/Relyion/Dashboard/client/src/components/gaugeModels.tsx":"7","/Users/jackdavey/GitProjects/Relyion/Dashboard/client/src/components/chartModels.js":"8"},{"size":554,"mtime":1665010460490,"results":"9","hashOfConfig":"10"},{"size":425,"mtime":1664313766674,"results":"11","hashOfConfig":"10"},{"size":1102,"mtime":1665012167467,"results":"12","hashOfConfig":"10"},{"size":6951,"mtime":1664580643917,"results":"13","hashOfConfig":"10"},{"size":732,"mtime":1664490378255,"results":"14","hashOfConfig":"10"},{"size":169,"mtime":1664487516333,"results":"15","hashOfConfig":"10"},{"size":1417,"mtime":1665010476748,"results":"16","hashOfConfig":"10"},{"size":2265,"mtime":1665012147334,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"cov1vb",{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"46"},"/Users/jackdavey/GitProjects/Relyion/Dashboard/client/src/index.tsx",[],[],"/Users/jackdavey/GitProjects/Relyion/Dashboard/client/src/reportWebVitals.ts",[],[],[],"/Users/jackdavey/GitProjects/Relyion/Dashboard/client/src/App.tsx",["47"],[],"/Users/jackdavey/GitProjects/Relyion/Dashboard/client/src/components/listDataSamples.js",["48","49"],[],"import React, { Component } from \"react\";\nimport { styled } from '@mui/material/styles';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell, { tableCellClasses } from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport DataSampleService from \"../services/datasample.service\";\nimport { Container, width } from \"@mui/system\";\n\n\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\n  [`&.${tableCellClasses.head}`]: {\n    backgroundColor: theme.palette.common.black,\n        color: theme.palette.common.white,\n        fontSize: 18,\n    fontWeight: 'bold',\n  },\n  [`&.${tableCellClasses.body}`]: {\n      fontSize: 14,\n  },\n}));\n\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({\n  '&:nth-of-type(odd)': {\n    backgroundColor: theme.palette.action.hover,\n  },\n  // hide last border\n  '&:last-child td, &:last-child th': {\n    border: 0,\n    },\n    '&:hover': {\n        backgroundColor: '#f5f5f5',\n    },\n}));\n\nexport default class ListDataSamples extends Component {\n    constructor(props) {\n        super(props);\n        this.retrieveDataSamples = this.retrieveDataSamples.bind(this);\n        \n        this.state = {\n            dataSamples: [],\n            currentDataSample: null,\n            currentIndex: -1,\n        };\n    }\n\n    componentDidMount() {\n        this.retrieveDataSamples();\n    }\n\n    retrieveDataSamples() {\n        DataSampleService.getAll()\n            .then(response => {\n                this.setState({\n                    dataSamples: response.data\n                });\n                console.log(response.data);\n            })\n            .catch(e => {\n                console.log(e);\n            });\n    }\n\n    refreshDataSampleList() {\n        this.retrieveDataSamples();\n        this.setState({\n            currentDataSample: null,\n            currentIndex: -1\n        });\n    }\n\n    setActiveDataSample(dataSample, index) {\n        this.setState({\n            currentDataSample: dataSample,\n            currentIndex: index\n        });\n\n    }\n\n\n    render() {\n        const { dataSamples, currentDataSample, currentIndex } = this.state;\n\n        return (\n            <div style={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                alignItems: \"center\",\n                justifyContent: \"flex-start\",\n                height: \"100vh\",\n                width: \"90vw\"\n\n            }}>\n                <h1 style={{ alignSelf: 'flex-start' }}>Data Samples List</h1>\n                                        <div style={{padding: '1%'}}>\n\n            {currentDataSample ? (\n                    <div>\n                            <h4>Data Sample</h4>\n                            <div>\n                                <label>\n                                    <strong>Date:</strong>\n                                </label>{\" \"}\n                                {currentDataSample.time}\n                            </div>\n                            <div>\n                                <label>\n                                    <strong>Frequency:</strong>\n                                </label>{\" \"}\n                                {currentDataSample.freq}\n                            </div>\n                            {/* <Link\n                                to={\"/datasamples/\" + currentDataSample.id}\n                                className=\"badge badge-warning\"\n                            >\n                                Edit\n                            </Link> */}\n                        </div>\n                    ) : (\n                        <div>\n                            <br />\n                            <p>Please click on a Data Sample...</p>\n                        </div>\n                    )}\n            \n            <TableContainer component={Paper} sx={{maxHeight: \"70vh\"}} >\n                    <Table stickyHeader sx={{ \n                        width: \"100%\",\n                        backgroundColor: \"lightblue\",\n                        // border: \"1px solid black\",\n                        borderCollapse: \"collapse\",\n                        \n                    }} >\n                        <TableHead sx={{position: 'sticky'}}>\n                            <TableRow>\n                                <StyledTableCell>ID</StyledTableCell>\n                                <StyledTableCell>Time</StyledTableCell>\n                                <StyledTableCell>Freq</StyledTableCell>\n                                <StyledTableCell>Vab</StyledTableCell>\n                                <StyledTableCell>Vbc</StyledTableCell>\n                                <StyledTableCell>Vca</StyledTableCell>\n                                <StyledTableCell>Van</StyledTableCell>\n                                <StyledTableCell>Vbn</StyledTableCell>\n                                <StyledTableCell>Vcn</StyledTableCell>\n                                <StyledTableCell>pf</StyledTableCell>\n\n\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                        {dataSamples &&\n                            dataSamples.map((dataSample, index) => (\n                                <StyledTableRow\n                                    className={\n                                        \"list-group-item \" +\n                                        (index === currentIndex ? \"active\" : \"\")\n                                    }\n                                    onClick={() => this.setActiveDataSample(dataSample, index)}\n                                    key={index}\n                                >\n                                    <StyledTableCell>{dataSample.id}</StyledTableCell>\n                                    <StyledTableCell>{dataSample.Time}</StyledTableCell>\n                                    <StyledTableCell>{dataSample.freq}</StyledTableCell>\n                                    <StyledTableCell>{dataSample.Vab}</StyledTableCell>\n                                    <StyledTableCell>{dataSample.Vbc}</StyledTableCell>\n                                    <StyledTableCell>{dataSample.Vca}</StyledTableCell>\n                                    <StyledTableCell>{dataSample.Van}</StyledTableCell>\n                                    <StyledTableCell>{dataSample.Vbn}</StyledTableCell>\n                                    <StyledTableCell>{dataSample.Vcn}</StyledTableCell>\n                                    <StyledTableCell>{dataSample.pf}</StyledTableCell>\n\n\n                                </StyledTableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n\n\n                    \n                </TableContainer>\n                </div>\n                </div>\n        );\n    }\n}",[],"/Users/jackdavey/GitProjects/Relyion/Dashboard/client/src/services/datasample.service.ts",[],[],"/Users/jackdavey/GitProjects/Relyion/Dashboard/client/src/http-common.ts",[],[],"/Users/jackdavey/GitProjects/Relyion/Dashboard/client/src/components/gaugeModels.tsx",["50"],[],"/Users/jackdavey/GitProjects/Relyion/Dashboard/client/src/components/chartModels.js",["51"],[],"import React from \"react\";\n\n\nimport { ReactDOM } from \"react\";\nimport ApexCharts from 'apexcharts'\nimport {ReactApexChart, getNewSeries} from \"apexcharts\";\n\n// Testing out ApexCharts for dashboard use\n// Demo adapted from https://apexcharts.com/react-chart-demos/line-charts/realtime/\nexport default class LineChart extends React.Component {\n        constructor(props) {\n          super(props);\n\n          this.state = {\n          \n              series: [{\n                data:[[1324508400000, 34], [1324594800000, 54] , [1326236400000, 43]]\n            }],\n            options: {\n              chart: {\n                id: 'realtime',\n                height: 350,\n                type: 'line',\n                animations: {\n                  enabled: true,\n                  easing: 'linear',\n                  dynamicAnimation: {\n                    speed: 1000\n                  }\n                },\n                toolbar: {\n                  show: false\n                },\n                zoom: {\n                  enabled: false\n                }\n              },\n              dataLabels: {\n                enabled: false\n              },\n              stroke: {\n                curve: 'smooth'\n              },\n              title: {\n                text: 'Dynamic Updating Chart',\n                align: 'left'\n              },\n              markers: {\n                size: 0\n              },\n              xaxis: {\n                type: 'datetime',\n                // range: XAXISRANGE,\n              },\n              yaxis: {\n                max: 100\n              },\n              legend: {\n                show: false\n              },\n            },\n          \n          \n          };\n        }\n\n      \n        componentDidMount() {\n          window.setInterval(() => {\n            getNewSeries(this.lastDate, {\n              min: 10,\n              max: 90\n            })\n            \n            ApexCharts.exec('realtime', 'updateSeries', [{\n              data: this.data\n            }])\n          }, 1000)\n        }\n      \n\n        render() {\n          return (\n            \n\n\n      <div id=\"chart\">\n  <ReactApexChart options={this.state.options} series={this.state.series} type=\"line\" height={350} />\n</div>\n    \n\n\n          );\n        }\n      }",[],{"ruleId":"52","severity":1,"message":"53","line":5,"column":8,"nodeType":"54","messageId":"55","endLine":5,"endColumn":17},{"ruleId":"56","severity":1,"message":"57","line":11,"column":10,"nodeType":"54","messageId":"55","endLine":11,"endColumn":19},{"ruleId":"56","severity":1,"message":"58","line":11,"column":21,"nodeType":"54","messageId":"55","endLine":11,"endColumn":26},{"ruleId":"52","severity":1,"message":"59","line":1,"column":20,"nodeType":"54","messageId":"55","endLine":1,"endColumn":26},{"ruleId":"56","severity":1,"message":"60","line":4,"column":10,"nodeType":"54","messageId":"55","endLine":4,"endColumn":18},"@typescript-eslint/no-unused-vars","'LineChart' is defined but never used.","Identifier","unusedVar","no-unused-vars","'Container' is defined but never used.","'width' is defined but never used.","'useRef' is defined but never used.","'ReactDOM' is defined but never used."]