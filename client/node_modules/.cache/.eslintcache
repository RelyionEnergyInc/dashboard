[{"/Users/jackdavey/GitProjects/Relyion/Dashboard/client/src/index.tsx":"1","/Users/jackdavey/GitProjects/Relyion/Dashboard/client/src/reportWebVitals.ts":"2","/Users/jackdavey/GitProjects/Relyion/Dashboard/client/src/App.tsx":"3","/Users/jackdavey/GitProjects/Relyion/Dashboard/client/src/http-common.ts":"4","/Users/jackdavey/GitProjects/Relyion/Dashboard/client/src/components/gaugeModels.tsx":"5","/Users/jackdavey/GitProjects/Relyion/Dashboard/client/src/components/listStaticDataSamples.js":"6","/Users/jackdavey/GitProjects/Relyion/Dashboard/client/src/components/listLiveDataSamples.js":"7","/Users/jackdavey/GitProjects/Relyion/Dashboard/client/src/services/datasample.service.ts":"8","/Users/jackdavey/GitProjects/Relyion/Dashboard/client/src/store.tsx":"9","/Users/jackdavey/GitProjects/Relyion/Dashboard/client/src/setStateVals.js":"10","/Users/jackdavey/GitProjects/Relyion/Dashboard/client/src/components/chartModels.tsx":"11","/Users/jackdavey/GitProjects/Relyion/Dashboard/client/src/components/test.js":"12"},{"size":558,"mtime":1665702345201,"results":"13","hashOfConfig":"14"},{"size":425,"mtime":1664313766674,"results":"15","hashOfConfig":"14"},{"size":4928,"mtime":1666388540411,"results":"16","hashOfConfig":"14"},{"size":169,"mtime":1664487516333,"results":"17","hashOfConfig":"14"},{"size":2119,"mtime":1666307814708,"results":"18","hashOfConfig":"14"},{"size":6849,"mtime":1665183337342,"results":"19","hashOfConfig":"14"},{"size":7553,"mtime":1665699586987,"results":"20","hashOfConfig":"14"},{"size":723,"mtime":1665701301160,"results":"21","hashOfConfig":"14"},{"size":2271,"mtime":1665615799873,"results":"22","hashOfConfig":"14"},{"size":280,"mtime":1665616740281,"results":"23","hashOfConfig":"14"},{"size":2108,"mtime":1666218863180,"results":"24","hashOfConfig":"14"},{"size":133,"mtime":1666306573799,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"cov1vb",{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"29"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"29"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jackdavey/GitProjects/Relyion/Dashboard/client/src/index.tsx",[],[],[],"/Users/jackdavey/GitProjects/Relyion/Dashboard/client/src/reportWebVitals.ts",[],[],"/Users/jackdavey/GitProjects/Relyion/Dashboard/client/src/App.tsx",["67","68","69","70"],[],"/Users/jackdavey/GitProjects/Relyion/Dashboard/client/src/http-common.ts",[],[],"/Users/jackdavey/GitProjects/Relyion/Dashboard/client/src/components/gaugeModels.tsx",["71","72"],[],"import { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\nimport { Doughnut } from \"react-chartjs-2\";\nimport ReactSpeedometer from \"react-d3-speedometer\";\n\n\nChartJS.register(ArcElement, Tooltip, Legend);\n\ninterface DoughnutModelProps {\n  values: number[];\n  labels: string[];\n}\n\ninterface GaugeModelProps {\n  value: number;\n  label: string;\n  levelCount: number;\n  arcLengths: number[];\n}\n\ninterface GaugeProps {\n  val1?: number;\n  unit1?: string;\n}\n\ninterface MeterProps {\n  value: number;\n  max: number;\n}\n\n\n\n\nconst gaugeStyle = {\n  maxWidth: \"20vw\",\n  height: 250,\n}\n\n\nexport const data = {\n  datasets: [\n    {\n      label: '# of Votes',\n      data: [12, 19, 3, 5, 2, 3],\n      backgroundColor: [\n        'rgba(255, 99, 132, 0.2)',\n        'rgba(54, 162, 235, 0.2)',\n        'rgba(255, 206, 86, 0.2)',\n        'rgba(75, 192, 192, 0.2)',\n        'rgba(153, 102, 255, 0.2)',\n        'rgba(255, 159, 64, 0.2)',\n      ],\n      borderColor: [\n        'rgba(255, 99, 132, 1)',\n        'rgba(54, 162, 235, 1)',\n        'rgba(255, 206, 86, 1)',\n        'rgba(75, 192, 192, 1)',\n        'rgba(153, 102, 255, 1)',\n        'rgba(255, 159, 64, 1)',\n      ],\n      borderWidth: 1,\n    },\n  ],\n};\n\nconst options = {\n  responsive: true,\n}\n\nexport function DoughnutModels({ values, labels }: DoughnutModelProps) {\n  const data = {\n    labels,\n    datasets: [\n      {\n        label: 'Dataset 1',\n        data: values,\n        backgroundColor: ['rgba(255, 99, 132, 0.5)',\n          'rgba(54, 162, 235, 0.5)',\n          'rgba(255, 206, 86, 0.5)',\n        ],\n      },\n    ],\n  };\n  return (\n    <Doughnut data={data} options={options} width={300} height={300} />\n  );\n}\n\n\n// export function GaugeModels({ value, levelCount, label, arcLengths }: GaugeModelProps) {\n\nexport function GaugeModels(props: GaugeProps) {\n  return (\n\n    <>\n      <div style={gaugeStyle}>\n        <ReactSpeedometer\n          value={props.val1}\n          minValue={0}\n          maxValue={100}\n          segments={800}\n          maxSegmentLabels={5}\n          startColor=\"lightgreen\"\n          endColor=\"red\"\n        />\n      </div>\n    </>\n  );\n}","/Users/jackdavey/GitProjects/Relyion/Dashboard/client/src/components/listStaticDataSamples.js",[],[],[],"/Users/jackdavey/GitProjects/Relyion/Dashboard/client/src/components/listLiveDataSamples.js",["73","74","75","76","77","78","79","80","81","82","83"],[],"import React, { Component, useState, useEffect } from \"react\";\nimport { styled } from '@mui/material/styles';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell, { tableCellClasses } from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport DataSampleService from \"../services/datasample.service\";\n// import { Container, width } from \"@mui/system\";\n\nimport useStore from '../store';\n\nimport { currentSample, idx, increaseIdx, value, setValue } from '../store';\n\nimport {setIdx, setCurrentSample} from '../setStateVals.js';\n\n\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\n  [`&.${tableCellClasses.head}`]: {\n    backgroundColor: theme.palette.common.black,\n        color: theme.palette.common.white,\n        fontSize: 18,\n    fontWeight: 'bold',\n  },\n  [`&.${tableCellClasses.body}`]: {\n      fontSize: 14,\n  },\n}));\n\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({\n  '&:nth-of-type(odd)': {\n    backgroundColor: theme.palette.action.hover,\n  },\n  // hide last border\n  '&:last-child td, &:last-child th': {\n    border: 0,\n    },\n    '&:hover': {\n        backgroundColor: '#f5f5f5',\n    },\n}));\n\nconst store = useStore.subscribe((state) => state.idx);\n\nexport default class ListLiveDataSamples extends Component {\n    // const setIdx = useStore((state) => state.setIdx);\n    constructor(props) {\n        super(props);\n        this.retrieveDataSamples = this.retrieveDataSamples.bind(this);\n        \n        this.state = {\n            dataSamples: [],\n            currentDataSample: null,\n            currentIndex: 1,\n        };\n    }\n\n\n    componentDidMount() {\n        setInterval(() => {\n            this.setState({\n                currentIndex: this.state.currentIndex + 1\n            });\n            console.log(\"incrementing index: \" + this.state.currentIndex);\n        \n        //Retrieve data samples from the server given the current index\n        DataSampleService.get(this.state.currentIndex)\n                .then(response => {\n                this.setState({\n                    dataSamples: response.data\n                });\n                console.log(response.data);\n            })\n            .catch(e => {\n                console.log(e);\n            });\n            // setIdx(this.state.currentIndex);\n            setCurrentSample(this.state.dataSamples);\n        }, 1000);\n    }\n\n    simulateTimePassing() {\n        setInterval(() => {\n            const state = this.state;\n            this.setState({\n                currentIndex: state.currentIndex + 1\n            });\n            console.log(\"incrementing index: \" + this.state.currentIndex);\n        \n        //Retrieve data samples from the server given the current index\n        DataSampleService.get(this.state.currentIndex)\n                .then(response => {\n                this.setState({\n                    dataSamples: response.data\n                });\n                console.log(response.data);\n            })\n            .catch(e => {\n                console.log(e);\n            });\n            // setIdx(this.state.currentIndex);\n            setCurrentSample(this.state.dataSamples);\n        }, 1000);\n        clearInterval(this.state.interval);\n        //Implement better handling of missing / not ready data samples\n    }\n\n\n\n    \n    \n\n    // componentDidMount() {\n    //     this.retrieveDataSamples();\n    //     console.log(\"mounting: \" + this.state.currentIndex);\n    // }\n    componentWillUnmount() {\n    // Clear the interval right before component unmount\n        clearInterval(this.state.interval);\n        console.log(\"unmounting: \" + this.state.currentIndex);\n    }\n\n    retrieveDataSamples() {\n        this.simulateTimePassing();\n    }\n\n    refreshDataSampleList() {\n        this.retrieveDataSamples();\n        this.setState({\n            currentDataSample: null,\n            currentIndex: -1\n        });\n    }\n\n    setActiveDataSample(dataSample, index) {\n        this.setState({\n            currentDataSample: dataSample,\n            currentIndex: index\n        });\n\n    }\n\n    \n\n    \n\n\n    render() {\n        const { dataSamples, currentDataSample, currentIndex } = this.state;\n\n        return (\n            <div style={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                alignItems: \"center\",\n                justifyContent: \"flex-start\",\n            }}>\n        <div style={{padding: '1%'}}>   \n            <TableContainer component={Paper} sx={{maxHeight: \"70vh\"}} >\n                    <Table stickyHeader sx={{ \n                        width: \"100%\",\n                        backgroundColor: \"lightblue\",\n                        // border: \"1px solid black\",\n                        borderCollapse: \"collapse\",\n                        \n                    }} >\n                        <TableHead sx={{position: 'sticky'}}>\n                            <TableRow>\n                                <StyledTableCell>Time</StyledTableCell>\n                                <StyledTableCell>ID</StyledTableCell>\n                                <StyledTableCell>Freq</StyledTableCell>\n                                <StyledTableCell>Vab</StyledTableCell>\n                                <StyledTableCell>Vbc</StyledTableCell>\n                                <StyledTableCell>Vca</StyledTableCell>\n                                <StyledTableCell>Van</StyledTableCell>\n                                <StyledTableCell>Vbn</StyledTableCell>\n                                <StyledTableCell>Vcn</StyledTableCell>\n                                <StyledTableCell>pf</StyledTableCell>\n\n\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                        {dataSamples &&\n                                <StyledTableRow>\n                                    <StyledTableCell>{dataSamples.Time}</StyledTableCell>\n                                    <StyledTableCell>{dataSamples.id}</StyledTableCell>\n                                    <StyledTableCell>{dataSamples.freq}</StyledTableCell>\n                                    <StyledTableCell>{dataSamples.Vab}</StyledTableCell>\n                                    <StyledTableCell>{dataSamples.Vbc}</StyledTableCell>\n                                    <StyledTableCell>{dataSamples.Vca}</StyledTableCell>\n                                    <StyledTableCell>{dataSamples.Van}</StyledTableCell>\n                                    <StyledTableCell>{dataSamples.Vbn}</StyledTableCell>\n                                    <StyledTableCell>{dataSamples.Vcn}</StyledTableCell>\n                                    <StyledTableCell>{dataSamples.pf}</StyledTableCell>\n\n\n                                </StyledTableRow>\n                            }\n                        </TableBody>\n                    </Table>\n\n\n                    \n                    </TableContainer>\n                    <div\n                        style={{\n                            display: \"flex\",\n                            flexDirection: \"row\",\n                            alignItems: \"center\",\n                            justifyContent: \"center\",\n                        }}\n                    >\n                      Getting Data Sample: <h4>{this.state.currentIndex}</h4>\n                    </div>\n                </div>\n                </div>\n        );\n    }\n}","/Users/jackdavey/GitProjects/Relyion/Dashboard/client/src/services/datasample.service.ts",[],[],"/Users/jackdavey/GitProjects/Relyion/Dashboard/client/src/store.tsx",[],[],"/Users/jackdavey/GitProjects/Relyion/Dashboard/client/src/setStateVals.js",[],[],"/Users/jackdavey/GitProjects/Relyion/Dashboard/client/src/components/chartModels.tsx",["84","85"],[],"import {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n  PointElement,\n  LineElement,\n} from 'chart.js';\nimport { Bar, Line } from 'react-chartjs-2';\n\nimport { useEffect, useState } from 'react';\n\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n  PointElement,\n  LineElement\n);\n\ninterface LineChartProps {\n  valueA: number[];\n  timeA: number[];\n  minY: number;\n  maxY: number;\n  label: string;\n}\n\nexport function LineChart({ valueA, timeA, minY, maxY, label }: LineChartProps) {\n\n\n  const options = {\n    responsive: true,\n    scales: {\n      y: {\n        min: minY,\n        max: maxY,\n        stepSize: 5,\n      },\n      x:\n      {\n\n      },\n    },\n    plugins: {\n      legend: {\n        position: 'top' as const,\n      },\n      title: {\n        display: true,\n        text: 'Chart.js Bar Chart',\n      },\n    },\n    // maintainAspectRatio: false,\n  };\n\n  const values = [...valueA]\n  const labels = [...timeA];\n\n\n  const data = {\n    labels,\n    datasets: [\n      {\n        label: label,\n        data: values,\n        backgroundColor: ['rgba(255, 99, 132, 0.5)'],\n      },\n    ],\n  };\n  return (\n    <Line data={data} options={options} height={300} />\n  )\n}\n\ninterface BarChartProps {\n  valueA: number;\n  valueB: number;\n  valueC: number;\n}\n\nexport function BarChart({ valueA, valueB, valueC }: BarChartProps) {\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top' as const,\n      },\n      title: {\n        display: true,\n        text: 'Chart.js Bar Chart',\n      },\n    },\n    // maintainAspectRatio: false,\n  };\n\n  const labels = ['A', 'B', 'C'];\n\n  const data = {\n    labels,\n    datasets: [\n      {\n        label: 'Dataset 1',\n        data: [valueA, valueB, valueC],\n        backgroundColor: 'rgba(255, 99, 132, 0.5)',\n      },\n      {\n        label: 'Dataset 2',\n        data: [valueC, valueB, valueA],\n        backgroundColor: 'rgba(53, 162, 235, 0.5)',\n      },\n    ],\n  };\n\n  return (\n    <Bar data={data} options={options} width={500} height={200} />\n  )\n}","/Users/jackdavey/GitProjects/Relyion/Dashboard/client/src/components/test.js",[],[],{"ruleId":"86","severity":1,"message":"87","line":3,"column":8,"nodeType":"88","messageId":"89","endLine":3,"endColumn":23},{"ruleId":"86","severity":1,"message":"90","line":8,"column":8,"nodeType":"88","messageId":"89","endLine":8,"endColumn":17},{"ruleId":"91","severity":1,"message":"92","line":40,"column":6,"nodeType":"93","endLine":40,"endColumn":17,"suggestions":"94"},{"ruleId":"86","severity":1,"message":"95","line":42,"column":9,"nodeType":"88","messageId":"89","endLine":42,"endColumn":24},{"ruleId":"86","severity":1,"message":"96","line":13,"column":11,"nodeType":"88","messageId":"89","endLine":13,"endColumn":26},{"ruleId":"86","severity":1,"message":"97","line":25,"column":11,"nodeType":"88","messageId":"89","endLine":25,"endColumn":21},{"ruleId":"98","severity":1,"message":"99","line":1,"column":28,"nodeType":"88","messageId":"89","endLine":1,"endColumn":36},{"ruleId":"98","severity":1,"message":"100","line":1,"column":38,"nodeType":"88","messageId":"89","endLine":1,"endColumn":47},{"ruleId":"98","severity":1,"message":"101","line":15,"column":10,"nodeType":"88","messageId":"89","endLine":15,"endColumn":23},{"ruleId":"98","severity":1,"message":"102","line":15,"column":25,"nodeType":"88","messageId":"89","endLine":15,"endColumn":28},{"ruleId":"98","severity":1,"message":"103","line":15,"column":30,"nodeType":"88","messageId":"89","endLine":15,"endColumn":41},{"ruleId":"98","severity":1,"message":"104","line":15,"column":43,"nodeType":"88","messageId":"89","endLine":15,"endColumn":48},{"ruleId":"98","severity":1,"message":"105","line":15,"column":50,"nodeType":"88","messageId":"89","endLine":15,"endColumn":58},{"ruleId":"98","severity":1,"message":"106","line":17,"column":9,"nodeType":"88","messageId":"89","endLine":17,"endColumn":15},{"ruleId":"98","severity":1,"message":"107","line":45,"column":7,"nodeType":"88","messageId":"89","endLine":45,"endColumn":12},{"ruleId":"98","severity":1,"message":"108","line":151,"column":30,"nodeType":"88","messageId":"89","endLine":151,"endColumn":47},{"ruleId":"98","severity":1,"message":"109","line":151,"column":49,"nodeType":"88","messageId":"89","endLine":151,"endColumn":61},{"ruleId":"86","severity":1,"message":"100","line":14,"column":10,"nodeType":"88","messageId":"89","endLine":14,"endColumn":19},{"ruleId":"86","severity":1,"message":"99","line":14,"column":21,"nodeType":"88","messageId":"89","endLine":14,"endColumn":29},"@typescript-eslint/no-unused-vars","'ListDataSamples' is defined but never used.","Identifier","unusedVar","'TestGauge' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'labels' and 'values'. Either include them or remove the dependency array. You can also do a functional update 'setLabels(l => ...)' if you only need 'labels' in the 'setLabels' call.","ArrayExpression",["110"],"'gaugeArcLengths' is assigned a value but never used.","'GaugeModelProps' is defined but never used.","'MeterProps' is defined but never used.","no-unused-vars","'useState' is defined but never used.","'useEffect' is defined but never used.","'currentSample' is defined but never used.","'idx' is defined but never used.","'increaseIdx' is defined but never used.","'value' is defined but never used.","'setValue' is defined but never used.","'setIdx' is defined but never used.","'store' is assigned a value but never used.","'currentDataSample' is assigned a value but never used.","'currentIndex' is assigned a value but never used.",{"desc":"111","fix":"112"},"Update the dependencies array to be: [idx, freq, labels, values]",{"range":"113","text":"114"},[1573,1584],"[idx, freq, labels, values]"]